# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import sign_language_pb2 as sign__language__pb2


class SignLanguageRecognitionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RecognizeSignLanguage = channel.unary_unary(
                '/SignLanguageRecognitionService/RecognizeSignLanguage',
                request_serializer=sign__language__pb2.VideoFrame.SerializeToString,
                response_deserializer=sign__language__pb2.RecognitionResult.FromString,
                )
        self.UploadVideo = channel.stream_unary(
                '/SignLanguageRecognitionService/UploadVideo',
                request_serializer=sign__language__pb2.VideoChunk.SerializeToString,
                response_deserializer=sign__language__pb2.RecognitionFileResult.FromString,
                )


class SignLanguageRecognitionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RecognizeSignLanguage(self, request, context):
        """Nhận diện trên từng frame
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadVideo(self, request_iterator, context):
        """Nhận và xử lý toàn bộ video
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SignLanguageRecognitionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RecognizeSignLanguage': grpc.unary_unary_rpc_method_handler(
                    servicer.RecognizeSignLanguage,
                    request_deserializer=sign__language__pb2.VideoFrame.FromString,
                    response_serializer=sign__language__pb2.RecognitionResult.SerializeToString,
            ),
            'UploadVideo': grpc.stream_unary_rpc_method_handler(
                    servicer.UploadVideo,
                    request_deserializer=sign__language__pb2.VideoChunk.FromString,
                    response_serializer=sign__language__pb2.RecognitionFileResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SignLanguageRecognitionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SignLanguageRecognitionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RecognizeSignLanguage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SignLanguageRecognitionService/RecognizeSignLanguage',
            sign__language__pb2.VideoFrame.SerializeToString,
            sign__language__pb2.RecognitionResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadVideo(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/SignLanguageRecognitionService/UploadVideo',
            sign__language__pb2.VideoChunk.SerializeToString,
            sign__language__pb2.RecognitionFileResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
